#!/usr/bin/env zsh

# blog-check.sh ‚Äî DNS Propagation & Connectivity Audit + Self‚ÄëTest (v4.3 ‚Äî 2025‚Äë03‚Äë26)
#
# USAGE:
#   chmod +x blog-check.sh
#   ./blog-check.sh [--advanced] [--debug]
#
# OPTIONS:
#   --advanced     Run traceroute (4 hops) & subdomain enumeration (subfinder)
#   --debug        Dump raw dig +trace output and full HTTP headers for troubleshooting
#
# DESCRIPTION:
#   1Ô∏è‚É£ Self‚ÄëTest Connectivity ‚Äî DNS resolution, ping, and HTTPS reachability to www.google.com
#       ‚Ä¢ Verify network/DNS is functional before auditing your domain
#
#   2Ô∏è‚É£ Nameserver Sanity ‚Äî Detect glue‚Äëstyle NS (e.g., ns1.yourdomain.com)
#       ‚Ä¢ Configuration: Domain registrar ‚Üí Nameservers
#       ‚Ä¢ Rationale: Glue NS indicate no authoritative zone served ‚Üí records won‚Äôt resolve
#
#   3Ô∏è‚É£ DNS Audit & Propagation ‚Äî For each critical record (CNAMEs + A-records)
#       ‚Ä¢ Validates expected target (www, blogspot, Search Console)
#       ‚Ä¢ Compares resolution across local resolver, three public resolvers (8.8.8.8, 1.1.1.1, 9.9.9.9), and authoritative NS
#       ‚Ä¢ Reports propagation counts; warns on partial
#
#   4Ô∏è‚É£ Verification CNAME Handling ‚Äî Treat NXDOMAIN on A lookup as ‚úÖ
#       ‚Ä¢ Configuration: Google Search Console ‚Üí Ownership Verification
#       ‚Ä¢ Rationale: Pure CNAME record shouldn‚Äôt resolve to IP
#
#   5Ô∏è‚É£ Root A‚ÄëRecords Presence & Propagation ‚Äî Ensure all four Blogger‚Äërecommended A-records exist
#       ‚Ä¢ Configuration: Blogger Dashboard ‚Üí Custom Domain / DNS zone editor
#       ‚Ä¢ Rationale: Required for naked‚Äëdomain ‚Üí www redirect
#
#   6Ô∏è‚É£ Root Forwarding Validation ‚Äî Must 301 redirect to https://www.<CUSTOM_DOMAIN>/
#       ‚Ä¢ Configuration: Registrar/Squarespace ‚Üí Domain Forwarding
#       ‚Ä¢ Rationale: Missing ‚Äúhttps://‚Äù or ‚Äúwww‚Äù breaks redirect
#
#   7Ô∏è‚É£ Blogger HTTPS Status ‚Äî Verify HTTPS Availability & HTTPS Redirect are enabled
#       ‚Ä¢ Configuration: Blogger Dashboard ‚Üí Settings ‚Üí HTTPS
#       ‚Ä¢ Rationale: Ensures SSL provisioning & forced secure traffic
#
#   8Ô∏è‚É£ Squarespace Forwarding Check ‚Äî Confirm full HTTPS URL in ‚ÄúEnter Website URL‚Äù field
#       ‚Ä¢ Configuration: Squarespace Domains ‚Üí Forwarding settings
#       ‚Ä¢ Rationale: Partial URL ‚Üí failed redirect
#
#   9Ô∏è‚É£ (--advanced) Traceroute + Subdomain Enumeration ‚Äî Advanced diagnostics if installed
#
#   üîü (--debug) Raw DNS trace & HTTP header dump for deep troubleshooting
#
# DEPENDENCIES:
#   Required: dig, curl, ping
#   Optional (--advanced): traceroute, subfinder
#   Recommended (--debug): shellcheck
#
# EXIT CODES:
#   0 = success (or warnings only)
#   >0 = critical failure (missing required config)
#############################################
# CONFIGURATION VARIABLES
#############################################
CNAME_1_HOST="abcd1234"
CNAME_1_TARGET="gv-xxxxxxx.dv.googlehosted.com"
WWW_TARGET="ghs.google.com"
BLOG_SUBDOMAIN="blog"
BLOGSPOT_DOMAIN="example.blogspot.com"
CUSTOM_DOMAIN="example.com"
#############################################
# DEFAULT NAMESERVER VARIABLES
#############################################
A_RECORDS=(216.239.32.21 216.239.34.21 216.239.36.21 216.239.38.21)
RESOLVERS=(8.8.8.8 1.1.1.1 9.9.9.9)
VERSION="4.3"
TEST_HOST="www.google.com"

GREEN=$(tput setaf 2); YELLOW=$(tput setaf 3); RED=$(tput setaf 1); RESET=$(tput sgr0)
ADVANCED=false; DEBUG=false
for arg in "$@"; do case "$arg" in --advanced) ADVANCED=true;; --debug) DEBUG=true;; esac; done

declare -A HAVE
for tool in dig curl ping traceroute subfinder; do 
  HAVE[$tool]=$([[ -x "$(command -v $tool)" ]] && echo 1 || echo 0)
done

echo "\n===== blog-check.sh v${VERSION} ‚Äî Self‚ÄëTest ====="

# DNS resolve test
[[ ${HAVE[dig]} -eq 1 ]] || { echo "${RED}‚úó dig missing ‚Äî install bind utilities${RESET}"; exit 1; }
google_ip=$(dig +short "${TEST_HOST}" | head -1)
[[ -n $google_ip ]] && echo "${GREEN}‚úì DNS resolves ${TEST_HOST} ‚Üí ${google_ip}${RESET}" || { echo "${RED}‚úó DNS lookup failed ‚Äî check network${RESET}"; exit 1; }

# Ping connectivity
if [[ ${HAVE[ping]} -eq 1 ]] && ping -c1 -W1 "$google_ip" >/dev/null 2>&1; then
  echo "${GREEN}‚úì ping OK${RESET}"
else
  echo "${RED}‚úó ping failed ‚Äî check firewall${RESET}"
  exit 1
fi

# HTTPS connectivity
[[ ${HAVE[curl]} -eq 1 ]] || { echo "${RED}‚úó curl missing ‚Äî install curl${RESET}"; exit 1; }
http_status=$(curl -s -o /dev/null -w "%{http_code}" "https://${TEST_HOST}")
[[ "$http_status" -eq 200 ]] && echo "${GREEN}‚úì HTTPS OK${RESET}" || { echo "${RED}‚úó HTTP ${http_status} ‚Äî check HTTPS/proxy${RESET}"; exit 1; }

echo "${GREEN}‚úî Self‚Äëtests passed${RESET}"

# Nameserver Sanity
echo "\n===== Nameserver Sanity ====="
ns=( $(dig +short NS "${CUSTOM_DOMAIN}") )
glue=false
for n in "${ns[@]}"; do
  if [[ "$n" =~ ${CUSTOM_DOMAIN//./\\.}\.?$ ]]; then
    glue=true
    echo "${YELLOW}‚ö† Glue-style NS detected ($n). Use proper DNS provider nameservers${RESET}"
  fi
done
$glue || echo "${GREEN}‚úì Nameservers correct${RESET}"

# DNS Audit
echo "\n===== DNS Audit ====="
for entry in "www:${WWW_TARGET}" "${BLOG_SUBDOMAIN}:${BLOGSPOT_DOMAIN}" "${CNAME_1_HOST}:${CNAME_1_TARGET}"; do
  host="${entry%%:*}"; expected="${entry##*:}"; fqdn="${host}.${CUSTOM_DOMAIN}"
  echo "\n‚îÄ‚îÄ ${fqdn} ‚îÄ‚îÄ"
  cname=$(dig +short CNAME "$fqdn")
  if [[ -z $cname ]]; then
    echo "${RED}‚úó Missing CNAME ‚Äî expected ${host}‚Üí${expected}${RESET}"
    continue
  fi
  echo "CNAME ‚Üí $cname"
  [[ "$host" == "$CNAME_1_HOST" && -n $(dig +short A "$fqdn") ]] && echo "${YELLOW}‚ö† Verification CNAME resolves to A-record ‚Äî NXDOMAIN expected${RESET}"

  pub=0; auth=0
  for r in "${RESOLVERS[@]}"; do
    [[ "$(dig +short CNAME "$fqdn" @"$r")" == "$cname" ]] && ((pub++))
  done
  for s in "${ns[@]}"; do
    [[ "$(dig +short CNAME "$fqdn" @"$s")" == "$cname" ]] && ((auth++))
  done
  echo "Propagation ‚Üí public ${pub}/${#RESOLVERS} | authoritative ${auth}/${#ns}"
done

# Root A-record Presence
echo "\n===== Root A-record Presence ====="
root_ips=( $(dig +short A "${CUSTOM_DOMAIN}") )
for a in "${A_RECORDS[@]}"; do
  if [[ " ${root_ips[*]} " =~ " ${a} " ]]; then
    echo "${GREEN}‚úì A-record ${a} present${RESET}"
  else
    echo "${RED}‚úó Missing A-record ${a}${RESET}"
  fi
done

# Root Forwarding Check
echo "\n===== Root Forwarding Check ====="
headers=$(curl -sI --max-time 5 "https://${CUSTOM_DOMAIN}")
forward_status=$(echo "$headers" | awk 'NR==1{print $2}')
location=$(echo "$headers" | awk '/Location:/ {print $2}' | tr -d '\r')
if [[ "$forward_status" == "301" && "$location" == "https://www.${CUSTOM_DOMAIN}/" ]]; then
  echo "${GREEN}‚úì Redirects to https://www.${CUSTOM_DOMAIN}/${RESET}"
else
  echo "${RED}‚úó Misconfigured forwarding ‚Äî expected full HTTPS URL${RESET}"
fi

# Blogger HTTPS Status
echo "\n===== Blogger HTTPS Status ====="
https_status=$(curl -sI "https://www.${CUSTOM_DOMAIN}" | head -1 | awk '{print $2}')
redirect_status=$(curl -sI "http://www.${CUSTOM_DOMAIN}" | head -1 | awk '{print $2}')
[[ "$https_status" == "200" ]] && echo "${GREEN}‚úì HTTPS enabled${RESET}" || echo "${RED}‚úó HTTPS unavailable${RESET}"
[[ "$redirect_status" == "301" ]] && echo "${GREEN}‚úì HTTP‚ÜíHTTPS redirect enabled${RESET}" || echo "${RED}‚úó HTTP not redirecting${RESET}"

# Advanced Diagnostics
if $ADVANCED && [[ ${HAVE[traceroute]} -eq 1 ]]; then
  echo "\n===== ADVANCED: Traceroute ====="
  traceroute -m4 "${CUSTOM_DOMAIN}"
fi
if $ADVANCED && [[ ${HAVE[subfinder]} -eq 1 ]]; then
  echo "\n===== ADVANCED: Subdomain Enumeration ====="
  subfinder -silent -d "${CUSTOM_DOMAIN}"
fi

# Debug Mode
if $DEBUG; then
  echo "\n===== DEBUG ====="
  dig +trace "${CUSTOM_DOMAIN}"
  echo "$headers"
fi

echo
